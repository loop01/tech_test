<?php

namespace DatabaseJson\Test\Classes\Helpers;

use DatabaseJson\Core\Helpers\Validate;
use DatabaseJson\Test\VfsHelper\Config as TestHelper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-03 at 16:22:49.
 */
class ValidateTest extends \PHPUnit\Framework\TestCase
{

    use TestHelper;

    /**
     * @var Validate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->setUpFilesystem();
        $this->object = new Validate;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::table
     * @todo   Implement testTable().
     */
    public function testTable()
    {
        $object = $this->object->table('users');
        $this->assertInstanceOf('DatabaseJson\Core\Helpers\Validate', $object);
        return $object;
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::isNumeric
     */
    public function testIsNumeric()
    {
        $this->assertTrue($this->object->isNumeric('integer'));
        $this->assertTrue($this->object->isNumeric('double'));
        $this->assertFalse($this->object->isNumeric('boolean'));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::types
     */
    public function testTypesMatches()
    {
        $this->assertTrue($this->object->types(['integer', 'double', 'string', 'boolean']));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::types
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testTypesNotMatches()
    {
        $this->object->types(['integer', 'float']);
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::filter
     */
    public function testFilterIndexedArrayFromIdKey()
    {
        $arrayOne = ['id', 'column1', 'column2'];
        $this->assertArrayNotHasKey('id', $this->object->filter($arrayOne));
        $arrayTwo = ['id' => 1, 'column1' => 'value1', 'column2' => 'value2'];
        $this->assertArrayNotHasKey('id', $this->object->filter($arrayTwo));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::arrToLower
     */
    public function testArrToLower()
    {
        $array = $this->object->arrToLower(['String1', 'StRIng2']);
        $this->assertSame(['string1', 'string2'], $array);
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::fields
     * @depends testTable
     */
    public function testFieldsExistsInTable($object)
    {
        $array = ['name', 'email'];
        $this->assertTrue($object->fields($array));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::fields
     * @depends testTable
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testFieldsNotExistsInTable($object)
    {
        $array = ['name', 'surname', 'city'];
        $object->fields($array);
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::field
     * @depends testTable
     */
    public function testFieldExistsInTable($object)
    {
        $field = 'name';
        $this->assertTrue($object->field($field));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::field
     * @depends testTable
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     * @expectedExceptionMessage Field surname does not exists in table "users"
     */
    public function testFieldNotExistsInTable($object)
    {
        $field = 'surname';
        $object->field($field);
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::exists
     * @depends testTable
     */
    public function testTableExists($object)
    {
        $this->assertTrue($object->exists());
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::exists
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testTableNotExists()
    {
        $object = $this->object->table('virtual');
        $object->exists();
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::type
     * @depends testTable
     */
    public function testTypeIsValid($object)
    {
        $this->assertTrue($object->type('name', 'Henry'));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::type
     * @depends testTable
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testTypeIsNotValid($object)
    {
        $object->type('name', 123);
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::relation
     */
    public function testRelationExists()
    {
        $this->assertTrue($this->object->relation('users', 'news'));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::relation
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testRelationNotExists()
    {
        $this->object->relation('users', 'tags');
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::relationType
     */
    public function testRelationTypeExists()
    {
        $this->assertTrue($this->object->relationType('belongsTo'));
    }

    /**
     * @covers \DatabaseJson\Core\Helpers\Validate::relationType
     * @expectedException \DatabaseJson\Core\Helpers\Exception
     */
    public function testRelationTypeNotExists()
    {
        $this->object->relationType('someRelation');
    }

}
